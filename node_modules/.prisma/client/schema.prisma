generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  WORKER
  ADMIN
  SUPER_ADMIN
}

model User {
  // Core Fields
  id          Int     @id @default(autoincrement())
  first_name  String  @db.VarChar(100)
  last_name   String  @db.VarChar(100)
  email       String  @unique @db.VarChar(100)
  phone       String? @db.VarChar(20)
  password    String  @db.VarChar(100)
  role        Role    @default(CUSTOMER)
  is_verified Boolean @default(false)
  is_active   Boolean @default(true)

  // Admin-Specific
  is_super_admin       Boolean   @default(false)
  last_password_change DateTime?
  invited_by_id        Int?
  invited_by           User?     @relation("InvitedBy", fields: [invited_by_id], references: [id], onDelete: SetNull)
  invited_users        User[]    @relation("InvitedBy")

  // Audit Log Relations
  admin_actions  AdminAuditLog[] @relation("AdminActions")
  target_actions AdminAuditLog[] @relation("TargetActions")

  // Worker Profile Relation
  worker_profile WorkerProfile? @relation("WorkerProfile")

  // Identification
  gender    String? @db.VarChar(10)
  id_type   String? @db.VarChar(20)
  id_number String? @db.VarChar(50)

  profile_picture String?

  // Halal Preferences
  prayer_in_room   Boolean @default(false)
  no_alcohol       Boolean @default(true)
  zabihah_only     Boolean @default(true)
  special_requests String?

  // Worker-Specific
  position   String? @db.VarChar(50)
  department String? @db.VarChar(50)

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  resetPasswordToken  String?   @unique
  resetPasswordExpire DateTime?

  carrier String? @db.VarChar(20)

  // Add these relations
  otps        OTP[]              @relation("UserOTPs")
  otpAttempts FailedOtpAttempt[] @relation("UserOtpAttempts")

  // Indexes
  @@index([email])
  @@index([role])
  @@index([id_number])
  @@index([invited_by_id])
  @@index([is_active])
  @@index([created_at])
  @@index([role, is_active])
}

model WorkerProfile {
  id         Int      @id @default(autoincrement())
  user       User     @relation("WorkerProfile", fields: [userId], references: [id], onDelete: Cascade)
  userId     Int      @unique
  position   String
  department String
  hire_date  DateTime @default(now())
  reports_to Int? // ID of the manager/supervisor
  salary     Float?

  @@index([userId])
  @@index([department])
}

model AdminAuditLog {
  id          Int      @id @default(autoincrement())
  action      String
  admin       User     @relation("AdminActions", fields: [adminId], references: [id])
  adminId     Int
  target      User     @relation("TargetActions", fields: [targetId], references: [id], onDelete: Cascade)
  targetId    Int
  metadata    Json?
  permissions Json?
  created_at  DateTime @default(now())
}

model OTP {
  id         Int      @id @default(autoincrement())
  user_id    Int
  user       User     @relation("UserOTPs", fields: [user_id], references: [id])
  code       String
  type       String // 'email' or 'sms'
  expires_at DateTime
  is_used    Boolean  @default(false)
  created_at DateTime @default(now())

  @@index([user_id])
  @@index([code])
  @@index([expires_at])
}

model FailedOtpAttempt {
  id             Int      @id @default(autoincrement())
  user_id        Int
  user           User     @relation("UserOtpAttempts", fields: [user_id], references: [id])
  attempted_code String
  attempt_type   String
  created_at     DateTime @default(now())

  @@index([user_id])
  @@index([created_at])
}
